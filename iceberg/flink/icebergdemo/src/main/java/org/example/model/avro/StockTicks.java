/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.example.model.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class StockTicks extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2780411684496598378L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"StockTicks\",\"namespace\":\"org.example.model.avro\",\"fields\":[{\"name\":\"volume\",\"type\":\"long\"},{\"name\":\"symbol\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"ts\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"month\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"high\",\"type\":\"double\"},{\"name\":\"low\",\"type\":\"double\"},{\"name\":\"key\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"date\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"close\",\"type\":\"double\"},{\"name\":\"open\",\"type\":\"double\"},{\"name\":\"day\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<StockTicks> ENCODER =
      new BinaryMessageEncoder<StockTicks>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<StockTicks> DECODER =
      new BinaryMessageDecoder<StockTicks>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<StockTicks> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<StockTicks> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<StockTicks> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<StockTicks>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this StockTicks to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a StockTicks from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a StockTicks instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static StockTicks fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private long volume;
   private java.lang.String symbol;
   private java.lang.String ts;
   private java.lang.String month;
   private double high;
   private double low;
   private java.lang.String key;
   private int year;
   private java.lang.String date;
   private double close;
   private double open;
   private java.lang.String day;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public StockTicks() {}

  /**
   * All-args constructor.
   * @param volume The new value for volume
   * @param symbol The new value for symbol
   * @param ts The new value for ts
   * @param month The new value for month
   * @param high The new value for high
   * @param low The new value for low
   * @param key The new value for key
   * @param year The new value for year
   * @param date The new value for date
   * @param close The new value for close
   * @param open The new value for open
   * @param day The new value for day
   */
  public StockTicks(java.lang.Long volume, java.lang.String symbol, java.lang.String ts, java.lang.String month, java.lang.Double high, java.lang.Double low, java.lang.String key, java.lang.Integer year, java.lang.String date, java.lang.Double close, java.lang.Double open, java.lang.String day) {
    this.volume = volume;
    this.symbol = symbol;
    this.ts = ts;
    this.month = month;
    this.high = high;
    this.low = low;
    this.key = key;
    this.year = year;
    this.date = date;
    this.close = close;
    this.open = open;
    this.day = day;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return volume;
    case 1: return symbol;
    case 2: return ts;
    case 3: return month;
    case 4: return high;
    case 5: return low;
    case 6: return key;
    case 7: return year;
    case 8: return date;
    case 9: return close;
    case 10: return open;
    case 11: return day;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: volume = (java.lang.Long)value$; break;
    case 1: symbol = value$ != null ? value$.toString() : null; break;
    case 2: ts = value$ != null ? value$.toString() : null; break;
    case 3: month = value$ != null ? value$.toString() : null; break;
    case 4: high = (java.lang.Double)value$; break;
    case 5: low = (java.lang.Double)value$; break;
    case 6: key = value$ != null ? value$.toString() : null; break;
    case 7: year = (java.lang.Integer)value$; break;
    case 8: date = value$ != null ? value$.toString() : null; break;
    case 9: close = (java.lang.Double)value$; break;
    case 10: open = (java.lang.Double)value$; break;
    case 11: day = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'volume' field.
   * @return The value of the 'volume' field.
   */
  public long getVolume() {
    return volume;
  }


  /**
   * Sets the value of the 'volume' field.
   * @param value the value to set.
   */
  public void setVolume(long value) {
    this.volume = value;
  }

  /**
   * Gets the value of the 'symbol' field.
   * @return The value of the 'symbol' field.
   */
  public java.lang.String getSymbol() {
    return symbol;
  }


  /**
   * Sets the value of the 'symbol' field.
   * @param value the value to set.
   */
  public void setSymbol(java.lang.String value) {
    this.symbol = value;
  }

  /**
   * Gets the value of the 'ts' field.
   * @return The value of the 'ts' field.
   */
  public java.lang.String getTs() {
    return ts;
  }


  /**
   * Sets the value of the 'ts' field.
   * @param value the value to set.
   */
  public void setTs(java.lang.String value) {
    this.ts = value;
  }

  /**
   * Gets the value of the 'month' field.
   * @return The value of the 'month' field.
   */
  public java.lang.String getMonth() {
    return month;
  }


  /**
   * Sets the value of the 'month' field.
   * @param value the value to set.
   */
  public void setMonth(java.lang.String value) {
    this.month = value;
  }

  /**
   * Gets the value of the 'high' field.
   * @return The value of the 'high' field.
   */
  public double getHigh() {
    return high;
  }


  /**
   * Sets the value of the 'high' field.
   * @param value the value to set.
   */
  public void setHigh(double value) {
    this.high = value;
  }

  /**
   * Gets the value of the 'low' field.
   * @return The value of the 'low' field.
   */
  public double getLow() {
    return low;
  }


  /**
   * Sets the value of the 'low' field.
   * @param value the value to set.
   */
  public void setLow(double value) {
    this.low = value;
  }

  /**
   * Gets the value of the 'key' field.
   * @return The value of the 'key' field.
   */
  public java.lang.String getKey() {
    return key;
  }


  /**
   * Sets the value of the 'key' field.
   * @param value the value to set.
   */
  public void setKey(java.lang.String value) {
    this.key = value;
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public int getYear() {
    return year;
  }


  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(int value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'date' field.
   * @return The value of the 'date' field.
   */
  public java.lang.String getDate() {
    return date;
  }


  /**
   * Sets the value of the 'date' field.
   * @param value the value to set.
   */
  public void setDate(java.lang.String value) {
    this.date = value;
  }

  /**
   * Gets the value of the 'close' field.
   * @return The value of the 'close' field.
   */
  public double getClose() {
    return close;
  }


  /**
   * Sets the value of the 'close' field.
   * @param value the value to set.
   */
  public void setClose(double value) {
    this.close = value;
  }

  /**
   * Gets the value of the 'open' field.
   * @return The value of the 'open' field.
   */
  public double getOpen() {
    return open;
  }


  /**
   * Sets the value of the 'open' field.
   * @param value the value to set.
   */
  public void setOpen(double value) {
    this.open = value;
  }

  /**
   * Gets the value of the 'day' field.
   * @return The value of the 'day' field.
   */
  public java.lang.String getDay() {
    return day;
  }


  /**
   * Sets the value of the 'day' field.
   * @param value the value to set.
   */
  public void setDay(java.lang.String value) {
    this.day = value;
  }

  /**
   * Creates a new StockTicks RecordBuilder.
   * @return A new StockTicks RecordBuilder
   */
  public static org.example.model.avro.StockTicks.Builder newBuilder() {
    return new org.example.model.avro.StockTicks.Builder();
  }

  /**
   * Creates a new StockTicks RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new StockTicks RecordBuilder
   */
  public static org.example.model.avro.StockTicks.Builder newBuilder(org.example.model.avro.StockTicks.Builder other) {
    if (other == null) {
      return new org.example.model.avro.StockTicks.Builder();
    } else {
      return new org.example.model.avro.StockTicks.Builder(other);
    }
  }

  /**
   * Creates a new StockTicks RecordBuilder by copying an existing StockTicks instance.
   * @param other The existing instance to copy.
   * @return A new StockTicks RecordBuilder
   */
  public static org.example.model.avro.StockTicks.Builder newBuilder(org.example.model.avro.StockTicks other) {
    if (other == null) {
      return new org.example.model.avro.StockTicks.Builder();
    } else {
      return new org.example.model.avro.StockTicks.Builder(other);
    }
  }

  /**
   * RecordBuilder for StockTicks instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<StockTicks>
    implements org.apache.avro.data.RecordBuilder<StockTicks> {

    private long volume;
    private java.lang.String symbol;
    private java.lang.String ts;
    private java.lang.String month;
    private double high;
    private double low;
    private java.lang.String key;
    private int year;
    private java.lang.String date;
    private double close;
    private double open;
    private java.lang.String day;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.example.model.avro.StockTicks.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.volume)) {
        this.volume = data().deepCopy(fields()[0].schema(), other.volume);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.month)) {
        this.month = data().deepCopy(fields()[3].schema(), other.month);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.high)) {
        this.high = data().deepCopy(fields()[4].schema(), other.high);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.low)) {
        this.low = data().deepCopy(fields()[5].schema(), other.low);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.key)) {
        this.key = data().deepCopy(fields()[6].schema(), other.key);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.year)) {
        this.year = data().deepCopy(fields()[7].schema(), other.year);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.date)) {
        this.date = data().deepCopy(fields()[8].schema(), other.date);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.close)) {
        this.close = data().deepCopy(fields()[9].schema(), other.close);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.open)) {
        this.open = data().deepCopy(fields()[10].schema(), other.open);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.day)) {
        this.day = data().deepCopy(fields()[11].schema(), other.day);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing StockTicks instance
     * @param other The existing instance to copy.
     */
    private Builder(org.example.model.avro.StockTicks other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.volume)) {
        this.volume = data().deepCopy(fields()[0].schema(), other.volume);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.symbol)) {
        this.symbol = data().deepCopy(fields()[1].schema(), other.symbol);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.ts)) {
        this.ts = data().deepCopy(fields()[2].schema(), other.ts);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.month)) {
        this.month = data().deepCopy(fields()[3].schema(), other.month);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.high)) {
        this.high = data().deepCopy(fields()[4].schema(), other.high);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.low)) {
        this.low = data().deepCopy(fields()[5].schema(), other.low);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.key)) {
        this.key = data().deepCopy(fields()[6].schema(), other.key);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.year)) {
        this.year = data().deepCopy(fields()[7].schema(), other.year);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.date)) {
        this.date = data().deepCopy(fields()[8].schema(), other.date);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.close)) {
        this.close = data().deepCopy(fields()[9].schema(), other.close);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.open)) {
        this.open = data().deepCopy(fields()[10].schema(), other.open);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.day)) {
        this.day = data().deepCopy(fields()[11].schema(), other.day);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'volume' field.
      * @return The value.
      */
    public long getVolume() {
      return volume;
    }


    /**
      * Sets the value of the 'volume' field.
      * @param value The value of 'volume'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setVolume(long value) {
      validate(fields()[0], value);
      this.volume = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'volume' field has been set.
      * @return True if the 'volume' field has been set, false otherwise.
      */
    public boolean hasVolume() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'volume' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearVolume() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'symbol' field.
      * @return The value.
      */
    public java.lang.String getSymbol() {
      return symbol;
    }


    /**
      * Sets the value of the 'symbol' field.
      * @param value The value of 'symbol'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setSymbol(java.lang.String value) {
      validate(fields()[1], value);
      this.symbol = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'symbol' field has been set.
      * @return True if the 'symbol' field has been set, false otherwise.
      */
    public boolean hasSymbol() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'symbol' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearSymbol() {
      symbol = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'ts' field.
      * @return The value.
      */
    public java.lang.String getTs() {
      return ts;
    }


    /**
      * Sets the value of the 'ts' field.
      * @param value The value of 'ts'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setTs(java.lang.String value) {
      validate(fields()[2], value);
      this.ts = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'ts' field has been set.
      * @return True if the 'ts' field has been set, false otherwise.
      */
    public boolean hasTs() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'ts' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearTs() {
      ts = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'month' field.
      * @return The value.
      */
    public java.lang.String getMonth() {
      return month;
    }


    /**
      * Sets the value of the 'month' field.
      * @param value The value of 'month'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setMonth(java.lang.String value) {
      validate(fields()[3], value);
      this.month = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'month' field has been set.
      * @return True if the 'month' field has been set, false otherwise.
      */
    public boolean hasMonth() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'month' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearMonth() {
      month = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'high' field.
      * @return The value.
      */
    public double getHigh() {
      return high;
    }


    /**
      * Sets the value of the 'high' field.
      * @param value The value of 'high'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setHigh(double value) {
      validate(fields()[4], value);
      this.high = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'high' field has been set.
      * @return True if the 'high' field has been set, false otherwise.
      */
    public boolean hasHigh() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'high' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearHigh() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'low' field.
      * @return The value.
      */
    public double getLow() {
      return low;
    }


    /**
      * Sets the value of the 'low' field.
      * @param value The value of 'low'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setLow(double value) {
      validate(fields()[5], value);
      this.low = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'low' field has been set.
      * @return True if the 'low' field has been set, false otherwise.
      */
    public boolean hasLow() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'low' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearLow() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'key' field.
      * @return The value.
      */
    public java.lang.String getKey() {
      return key;
    }


    /**
      * Sets the value of the 'key' field.
      * @param value The value of 'key'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setKey(java.lang.String value) {
      validate(fields()[6], value);
      this.key = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'key' field has been set.
      * @return True if the 'key' field has been set, false otherwise.
      */
    public boolean hasKey() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'key' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearKey() {
      key = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public int getYear() {
      return year;
    }


    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setYear(int value) {
      validate(fields()[7], value);
      this.year = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearYear() {
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'date' field.
      * @return The value.
      */
    public java.lang.String getDate() {
      return date;
    }


    /**
      * Sets the value of the 'date' field.
      * @param value The value of 'date'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setDate(java.lang.String value) {
      validate(fields()[8], value);
      this.date = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'date' field has been set.
      * @return True if the 'date' field has been set, false otherwise.
      */
    public boolean hasDate() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'date' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearDate() {
      date = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'close' field.
      * @return The value.
      */
    public double getClose() {
      return close;
    }


    /**
      * Sets the value of the 'close' field.
      * @param value The value of 'close'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setClose(double value) {
      validate(fields()[9], value);
      this.close = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'close' field has been set.
      * @return True if the 'close' field has been set, false otherwise.
      */
    public boolean hasClose() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'close' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearClose() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'open' field.
      * @return The value.
      */
    public double getOpen() {
      return open;
    }


    /**
      * Sets the value of the 'open' field.
      * @param value The value of 'open'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setOpen(double value) {
      validate(fields()[10], value);
      this.open = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'open' field has been set.
      * @return True if the 'open' field has been set, false otherwise.
      */
    public boolean hasOpen() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'open' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearOpen() {
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'day' field.
      * @return The value.
      */
    public java.lang.String getDay() {
      return day;
    }


    /**
      * Sets the value of the 'day' field.
      * @param value The value of 'day'.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder setDay(java.lang.String value) {
      validate(fields()[11], value);
      this.day = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'day' field has been set.
      * @return True if the 'day' field has been set, false otherwise.
      */
    public boolean hasDay() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'day' field.
      * @return This builder.
      */
    public org.example.model.avro.StockTicks.Builder clearDay() {
      day = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public StockTicks build() {
      try {
        StockTicks record = new StockTicks();
        record.volume = fieldSetFlags()[0] ? this.volume : (java.lang.Long) defaultValue(fields()[0]);
        record.symbol = fieldSetFlags()[1] ? this.symbol : (java.lang.String) defaultValue(fields()[1]);
        record.ts = fieldSetFlags()[2] ? this.ts : (java.lang.String) defaultValue(fields()[2]);
        record.month = fieldSetFlags()[3] ? this.month : (java.lang.String) defaultValue(fields()[3]);
        record.high = fieldSetFlags()[4] ? this.high : (java.lang.Double) defaultValue(fields()[4]);
        record.low = fieldSetFlags()[5] ? this.low : (java.lang.Double) defaultValue(fields()[5]);
        record.key = fieldSetFlags()[6] ? this.key : (java.lang.String) defaultValue(fields()[6]);
        record.year = fieldSetFlags()[7] ? this.year : (java.lang.Integer) defaultValue(fields()[7]);
        record.date = fieldSetFlags()[8] ? this.date : (java.lang.String) defaultValue(fields()[8]);
        record.close = fieldSetFlags()[9] ? this.close : (java.lang.Double) defaultValue(fields()[9]);
        record.open = fieldSetFlags()[10] ? this.open : (java.lang.Double) defaultValue(fields()[10]);
        record.day = fieldSetFlags()[11] ? this.day : (java.lang.String) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<StockTicks>
    WRITER$ = (org.apache.avro.io.DatumWriter<StockTicks>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<StockTicks>
    READER$ = (org.apache.avro.io.DatumReader<StockTicks>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeLong(this.volume);

    out.writeString(this.symbol);

    out.writeString(this.ts);

    out.writeString(this.month);

    out.writeDouble(this.high);

    out.writeDouble(this.low);

    out.writeString(this.key);

    out.writeInt(this.year);

    out.writeString(this.date);

    out.writeDouble(this.close);

    out.writeDouble(this.open);

    out.writeString(this.day);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.volume = in.readLong();

      this.symbol = in.readString();

      this.ts = in.readString();

      this.month = in.readString();

      this.high = in.readDouble();

      this.low = in.readDouble();

      this.key = in.readString();

      this.year = in.readInt();

      this.date = in.readString();

      this.close = in.readDouble();

      this.open = in.readDouble();

      this.day = in.readString();

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.volume = in.readLong();
          break;

        case 1:
          this.symbol = in.readString();
          break;

        case 2:
          this.ts = in.readString();
          break;

        case 3:
          this.month = in.readString();
          break;

        case 4:
          this.high = in.readDouble();
          break;

        case 5:
          this.low = in.readDouble();
          break;

        case 6:
          this.key = in.readString();
          break;

        case 7:
          this.year = in.readInt();
          break;

        case 8:
          this.date = in.readString();
          break;

        case 9:
          this.close = in.readDouble();
          break;

        case 10:
          this.open = in.readDouble();
          break;

        case 11:
          this.day = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










